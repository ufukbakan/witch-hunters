const { prcInterval } = require("./index");
const canvasWidth = 600;
const canvasHeight = 600;
const hexadecimalChars = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
let rendering = true;
const FPS = 144;
let jsInterval, intervalController;
let canvasLegacyContext, canvasPrecisionContext, colors, legacyPoints, precisionPoints;

window.addEventListener("load", ()=>{
    const canvasL = document.getElementById("legacy");
    const canvasM = document.getElementById("modern");
    const button = document.getElementById("dummy-button");
    canvasLegacyContext = canvasL.getContext("2d");
    canvasPrecisionContext = canvasM.getContext("2d");
    legacyPoints = [];
    precisionPoints = [];
    colors = [];
    for(let i = 0; i < canvasHeight; i+=10){
        legacyPoints.push( {x: 0, y: i} );
        precisionPoints.push( {x: 0, y: i} );
        colors.push(randomColor());
    }

    button.addEventListener("click", toggleInterval);
    
    jsInterval = window.setInterval( ()=> render(canvasLegacyContext, legacyPoints, colors), 1000/FPS );
    intervalController = prcInterval( 1000/FPS, ()=>render(canvasPrecisionContext, precisionPoints, colors) );
});

/**
 * @param {CanvasRenderingContext2D} context
 * @param {Array} points
 * @param {Array} colors
 */
function render(context, points, colors=undefined){
    context.fillStyle = "#000";
    context.clearRect(0, 0, canvasWidth, canvasHeight);
    for(let i = 0; i < points.length; i++){
        if(colors && colors[i]){
            context.fillStyle = colors[i];
        }
        context.fillRect(points[i].x, points[i].y, 10, 10);
        movePoint(points[i]);
    }
}

function movePoint(point){
    point.x = (point.x + 10) % canvasWidth;
    if(point.x == 0){
        point.y = (point.y + 10) % canvasHeight;
    }
}

function toggleInterval(){
    if(rendering){
        window.clearInterval(jsInterval);
        intervalController.end = true;
        rendering = false;
    }else{
        jsInterval = window.setInterval( ()=> render(canvasLegacyContext, legacyPoints, colors), 1000/FPS );
        intervalController = prcInterval( 1000/FPS, intervalController.callback );
        rendering = true;
    }
}

function randomColor(){
    let result = "#";
    for(let i = 0; i < 6; i++){
        result += hexadecimalChars[ Math.round( Math.random()*hexadecimalChars.length ) ];
    }
    return result;
}